// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: nip.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace hoppipolla.nip {
    export class EnergyReading extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            isd_as?: string;
            machine_id?: string;
            collected_at?: dependency_1.google.protobuf.Timestamp;
            energy_consumption_kWh?: number;
            cpu_usage_percentage?: number;
            memory_usage_percentage?: number;
            network_traffic_MB?: number;
            temperature_celsius?: number;
            power_source?: string;
            status?: string;
            carbon_emissions_kg?: number;
            renewable_energy_percentage?: number;
            energy_efficiency_rating?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("isd_as" in data && data.isd_as != undefined) {
                    this.isd_as = data.isd_as;
                }
                if ("machine_id" in data && data.machine_id != undefined) {
                    this.machine_id = data.machine_id;
                }
                if ("collected_at" in data && data.collected_at != undefined) {
                    this.collected_at = data.collected_at;
                }
                if ("energy_consumption_kWh" in data && data.energy_consumption_kWh != undefined) {
                    this.energy_consumption_kWh = data.energy_consumption_kWh;
                }
                if ("cpu_usage_percentage" in data && data.cpu_usage_percentage != undefined) {
                    this.cpu_usage_percentage = data.cpu_usage_percentage;
                }
                if ("memory_usage_percentage" in data && data.memory_usage_percentage != undefined) {
                    this.memory_usage_percentage = data.memory_usage_percentage;
                }
                if ("network_traffic_MB" in data && data.network_traffic_MB != undefined) {
                    this.network_traffic_MB = data.network_traffic_MB;
                }
                if ("temperature_celsius" in data && data.temperature_celsius != undefined) {
                    this.temperature_celsius = data.temperature_celsius;
                }
                if ("power_source" in data && data.power_source != undefined) {
                    this.power_source = data.power_source;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("carbon_emissions_kg" in data && data.carbon_emissions_kg != undefined) {
                    this.carbon_emissions_kg = data.carbon_emissions_kg;
                }
                if ("renewable_energy_percentage" in data && data.renewable_energy_percentage != undefined) {
                    this.renewable_energy_percentage = data.renewable_energy_percentage;
                }
                if ("energy_efficiency_rating" in data && data.energy_efficiency_rating != undefined) {
                    this.energy_efficiency_rating = data.energy_efficiency_rating;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get isd_as() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set isd_as(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get machine_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set machine_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get collected_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set collected_at(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_collected_at() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get energy_consumption_kWh() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set energy_consumption_kWh(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get cpu_usage_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set cpu_usage_percentage(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get memory_usage_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set memory_usage_percentage(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get network_traffic_MB() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set network_traffic_MB(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get temperature_celsius() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set temperature_celsius(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get power_source() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set power_source(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get carbon_emissions_kg() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set carbon_emissions_kg(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get renewable_energy_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set renewable_energy_percentage(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get energy_efficiency_rating() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set energy_efficiency_rating(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            id?: string;
            isd_as?: string;
            machine_id?: string;
            collected_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            energy_consumption_kWh?: number;
            cpu_usage_percentage?: number;
            memory_usage_percentage?: number;
            network_traffic_MB?: number;
            temperature_celsius?: number;
            power_source?: string;
            status?: string;
            carbon_emissions_kg?: number;
            renewable_energy_percentage?: number;
            energy_efficiency_rating?: string;
        }): EnergyReading {
            const message = new EnergyReading({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.isd_as != null) {
                message.isd_as = data.isd_as;
            }
            if (data.machine_id != null) {
                message.machine_id = data.machine_id;
            }
            if (data.collected_at != null) {
                message.collected_at = dependency_1.google.protobuf.Timestamp.fromObject(data.collected_at);
            }
            if (data.energy_consumption_kWh != null) {
                message.energy_consumption_kWh = data.energy_consumption_kWh;
            }
            if (data.cpu_usage_percentage != null) {
                message.cpu_usage_percentage = data.cpu_usage_percentage;
            }
            if (data.memory_usage_percentage != null) {
                message.memory_usage_percentage = data.memory_usage_percentage;
            }
            if (data.network_traffic_MB != null) {
                message.network_traffic_MB = data.network_traffic_MB;
            }
            if (data.temperature_celsius != null) {
                message.temperature_celsius = data.temperature_celsius;
            }
            if (data.power_source != null) {
                message.power_source = data.power_source;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.carbon_emissions_kg != null) {
                message.carbon_emissions_kg = data.carbon_emissions_kg;
            }
            if (data.renewable_energy_percentage != null) {
                message.renewable_energy_percentage = data.renewable_energy_percentage;
            }
            if (data.energy_efficiency_rating != null) {
                message.energy_efficiency_rating = data.energy_efficiency_rating;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                isd_as?: string;
                machine_id?: string;
                collected_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                energy_consumption_kWh?: number;
                cpu_usage_percentage?: number;
                memory_usage_percentage?: number;
                network_traffic_MB?: number;
                temperature_celsius?: number;
                power_source?: string;
                status?: string;
                carbon_emissions_kg?: number;
                renewable_energy_percentage?: number;
                energy_efficiency_rating?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.isd_as != null) {
                data.isd_as = this.isd_as;
            }
            if (this.machine_id != null) {
                data.machine_id = this.machine_id;
            }
            if (this.collected_at != null) {
                data.collected_at = this.collected_at.toObject();
            }
            if (this.energy_consumption_kWh != null) {
                data.energy_consumption_kWh = this.energy_consumption_kWh;
            }
            if (this.cpu_usage_percentage != null) {
                data.cpu_usage_percentage = this.cpu_usage_percentage;
            }
            if (this.memory_usage_percentage != null) {
                data.memory_usage_percentage = this.memory_usage_percentage;
            }
            if (this.network_traffic_MB != null) {
                data.network_traffic_MB = this.network_traffic_MB;
            }
            if (this.temperature_celsius != null) {
                data.temperature_celsius = this.temperature_celsius;
            }
            if (this.power_source != null) {
                data.power_source = this.power_source;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.carbon_emissions_kg != null) {
                data.carbon_emissions_kg = this.carbon_emissions_kg;
            }
            if (this.renewable_energy_percentage != null) {
                data.renewable_energy_percentage = this.renewable_energy_percentage;
            }
            if (this.energy_efficiency_rating != null) {
                data.energy_efficiency_rating = this.energy_efficiency_rating;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.isd_as.length)
                writer.writeString(2, this.isd_as);
            if (this.machine_id.length)
                writer.writeString(3, this.machine_id);
            if (this.has_collected_at)
                writer.writeMessage(4, this.collected_at, () => this.collected_at.serialize(writer));
            if (this.energy_consumption_kWh != 0)
                writer.writeFloat(5, this.energy_consumption_kWh);
            if (this.cpu_usage_percentage != 0)
                writer.writeFloat(6, this.cpu_usage_percentage);
            if (this.memory_usage_percentage != 0)
                writer.writeFloat(7, this.memory_usage_percentage);
            if (this.network_traffic_MB != 0)
                writer.writeFloat(8, this.network_traffic_MB);
            if (this.temperature_celsius != 0)
                writer.writeFloat(9, this.temperature_celsius);
            if (this.power_source.length)
                writer.writeString(10, this.power_source);
            if (this.status.length)
                writer.writeString(11, this.status);
            if (this.carbon_emissions_kg != 0)
                writer.writeFloat(12, this.carbon_emissions_kg);
            if (this.renewable_energy_percentage != 0)
                writer.writeFloat(13, this.renewable_energy_percentage);
            if (this.energy_efficiency_rating.length)
                writer.writeString(14, this.energy_efficiency_rating);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnergyReading {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnergyReading();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.isd_as = reader.readString();
                        break;
                    case 3:
                        message.machine_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.collected_at, () => message.collected_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.energy_consumption_kWh = reader.readFloat();
                        break;
                    case 6:
                        message.cpu_usage_percentage = reader.readFloat();
                        break;
                    case 7:
                        message.memory_usage_percentage = reader.readFloat();
                        break;
                    case 8:
                        message.network_traffic_MB = reader.readFloat();
                        break;
                    case 9:
                        message.temperature_celsius = reader.readFloat();
                        break;
                    case 10:
                        message.power_source = reader.readString();
                        break;
                    case 11:
                        message.status = reader.readString();
                        break;
                    case 12:
                        message.carbon_emissions_kg = reader.readFloat();
                        break;
                    case 13:
                        message.renewable_energy_percentage = reader.readFloat();
                        break;
                    case 14:
                        message.energy_efficiency_rating = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnergyReading {
            return EnergyReading.deserialize(bytes);
        }
    }
    export class GetEnergyReadingsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            isd_as?: string;
            interval?: dependency_2.hoppipolla.common.Interval;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("isd_as" in data && data.isd_as != undefined) {
                    this.isd_as = data.isd_as;
                }
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
            }
        }
        get isd_as() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set isd_as(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get interval() {
            return pb_1.Message.getWrapperField(this, dependency_2.hoppipolla.common.Interval, 2) as dependency_2.hoppipolla.common.Interval;
        }
        set interval(value: dependency_2.hoppipolla.common.Interval) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_interval() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            isd_as?: string;
            interval?: ReturnType<typeof dependency_2.hoppipolla.common.Interval.prototype.toObject>;
        }): GetEnergyReadingsRequest {
            const message = new GetEnergyReadingsRequest({});
            if (data.isd_as != null) {
                message.isd_as = data.isd_as;
            }
            if (data.interval != null) {
                message.interval = dependency_2.hoppipolla.common.Interval.fromObject(data.interval);
            }
            return message;
        }
        toObject() {
            const data: {
                isd_as?: string;
                interval?: ReturnType<typeof dependency_2.hoppipolla.common.Interval.prototype.toObject>;
            } = {};
            if (this.isd_as != null) {
                data.isd_as = this.isd_as;
            }
            if (this.interval != null) {
                data.interval = this.interval.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.isd_as.length)
                writer.writeString(1, this.isd_as);
            if (this.has_interval)
                writer.writeMessage(2, this.interval, () => this.interval.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEnergyReadingsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEnergyReadingsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.isd_as = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.interval, () => message.interval = dependency_2.hoppipolla.common.Interval.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEnergyReadingsRequest {
            return GetEnergyReadingsRequest.deserialize(bytes);
        }
    }
    export class GetEnergyReadingsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: EnergyReading[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, EnergyReading, 1) as EnergyReading[];
        }
        set data(value: EnergyReading[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            data?: ReturnType<typeof EnergyReading.prototype.toObject>[];
        }): GetEnergyReadingsResponse {
            const message = new GetEnergyReadingsResponse({});
            if (data.data != null) {
                message.data = data.data.map(item => EnergyReading.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof EnergyReading.prototype.toObject>[];
            } = {};
            if (this.data != null) {
                data.data = this.data.map((item: EnergyReading) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedMessage(1, this.data, (item: EnergyReading) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEnergyReadingsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEnergyReadingsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EnergyReading.deserialize(reader), EnergyReading));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEnergyReadingsResponse {
            return GetEnergyReadingsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedNipProxyService {
        static definition = {
            GetEnergyReadings: {
                path: "/hoppipolla.nip.NipProxy/GetEnergyReadings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEnergyReadingsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEnergyReadingsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEnergyReadingsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEnergyReadingsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetEnergyReadings(call: grpc_1.ServerUnaryCall<GetEnergyReadingsRequest, GetEnergyReadingsResponse>, callback: grpc_1.sendUnaryData<GetEnergyReadingsResponse>): void;
    }
    export class NipProxyClient extends grpc_1.makeGenericClientConstructor(UnimplementedNipProxyService.definition, "NipProxy", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetEnergyReadings: GrpcUnaryServiceInterface<GetEnergyReadingsRequest, GetEnergyReadingsResponse> = (message: GetEnergyReadingsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEnergyReadingsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEnergyReadingsResponse>, callback?: grpc_1.requestCallback<GetEnergyReadingsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEnergyReadings(message, metadata, options, callback);
        };
    }
}
