// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: policy.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as dependency_2 from "./path";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace hoppipolla.policy {
    export class Issuer extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            id?: string;
            name?: string;
        } & (({
            description?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                3: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
        }): Issuer {
            const message = new Issuer({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_description)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Issuer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Issuer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Issuer {
            return Issuer.deserialize(bytes);
        }
    }
    export class Policy extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            id?: string;
            issuer_id?: string;
            active?: boolean;
            statements?: string;
        } & (({
            description?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("issuer_id" in data && data.issuer_id != undefined) {
                    this.issuer_id = data.issuer_id;
                }
                if ("active" in data && data.active != undefined) {
                    this.active = data.active;
                }
                if ("statements" in data && data.statements != undefined) {
                    this.statements = data.statements;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get issuer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set issuer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get active() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set active(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get statements() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set statements(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                5: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            id?: string;
            issuer_id?: string;
            active?: boolean;
            statements?: string;
            description?: string;
        }): Policy {
            const message = new Policy({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.issuer_id != null) {
                message.issuer_id = data.issuer_id;
            }
            if (data.active != null) {
                message.active = data.active;
            }
            if (data.statements != null) {
                message.statements = data.statements;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                issuer_id?: string;
                active?: boolean;
                statements?: string;
                description?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.issuer_id != null) {
                data.issuer_id = this.issuer_id;
            }
            if (this.active != null) {
                data.active = this.active;
            }
            if (this.statements != null) {
                data.statements = this.statements;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.issuer_id.length)
                writer.writeString(2, this.issuer_id);
            if (this.active != false)
                writer.writeBool(3, this.active);
            if (this.statements.length)
                writer.writeString(4, this.statements);
            if (this.has_description)
                writer.writeString(5, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Policy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Policy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.issuer_id = reader.readString();
                        break;
                    case 3:
                        message.active = reader.readBool();
                        break;
                    case 4:
                        message.statements = reader.readString();
                        break;
                    case 5:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Policy {
            return Policy.deserialize(bytes);
        }
    }
    export class CreatePolicyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            issuer_id?: string;
            statements?: string;
        } & (({
            description?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("issuer_id" in data && data.issuer_id != undefined) {
                    this.issuer_id = data.issuer_id;
                }
                if ("statements" in data && data.statements != undefined) {
                    this.statements = data.statements;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get issuer_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set issuer_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get statements() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set statements(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                3: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            issuer_id?: string;
            statements?: string;
            description?: string;
        }): CreatePolicyRequest {
            const message = new CreatePolicyRequest({});
            if (data.issuer_id != null) {
                message.issuer_id = data.issuer_id;
            }
            if (data.statements != null) {
                message.statements = data.statements;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                issuer_id?: string;
                statements?: string;
                description?: string;
            } = {};
            if (this.issuer_id != null) {
                data.issuer_id = this.issuer_id;
            }
            if (this.statements != null) {
                data.statements = this.statements;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.issuer_id.length)
                writer.writeString(1, this.issuer_id);
            if (this.statements.length)
                writer.writeString(2, this.statements);
            if (this.has_description)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePolicyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePolicyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.issuer_id = reader.readString();
                        break;
                    case 2:
                        message.statements = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePolicyRequest {
            return CreatePolicyRequest.deserialize(bytes);
        }
    }
    export class CreatePolicyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): CreatePolicyResponse {
            const message = new CreatePolicyResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePolicyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePolicyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePolicyResponse {
            return CreatePolicyResponse.deserialize(bytes);
        }
    }
    export class DeletePolicyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): DeletePolicyRequest {
            const message = new DeletePolicyRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletePolicyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletePolicyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletePolicyRequest {
            return DeletePolicyRequest.deserialize(bytes);
        }
    }
    export class CreateIssuerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): CreateIssuerRequest {
            const message = new CreateIssuerRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateIssuerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateIssuerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateIssuerRequest {
            return CreateIssuerRequest.deserialize(bytes);
        }
    }
    export class CreateIssuerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): CreateIssuerResponse {
            const message = new CreateIssuerResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateIssuerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateIssuerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateIssuerResponse {
            return CreateIssuerResponse.deserialize(bytes);
        }
    }
    export class ListPoliciesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            policies?: Policy[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("policies" in data && data.policies != undefined) {
                    this.policies = data.policies;
                }
            }
        }
        get policies() {
            return pb_1.Message.getRepeatedWrapperField(this, Policy, 1) as Policy[];
        }
        set policies(value: Policy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            policies?: ReturnType<typeof Policy.prototype.toObject>[];
        }): ListPoliciesResponse {
            const message = new ListPoliciesResponse({});
            if (data.policies != null) {
                message.policies = data.policies.map(item => Policy.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                policies?: ReturnType<typeof Policy.prototype.toObject>[];
            } = {};
            if (this.policies != null) {
                data.policies = this.policies.map((item: Policy) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.policies.length)
                writer.writeRepeatedMessage(1, this.policies, (item: Policy) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPoliciesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPoliciesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.policies, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Policy.deserialize(reader), Policy));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPoliciesResponse {
            return ListPoliciesResponse.deserialize(bytes);
        }
    }
    export class ValidatePathRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: dependency_2.hoppipolla.path.Path;
            start_time?: string;
            end_time?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
        }
        get path() {
            return pb_1.Message.getWrapperField(this, dependency_2.hoppipolla.path.Path, 1) as dependency_2.hoppipolla.path.Path;
        }
        set path(value: dependency_2.hoppipolla.path.Path) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_path() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set start_time(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set end_time(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            path?: ReturnType<typeof dependency_2.hoppipolla.path.Path.prototype.toObject>;
            start_time?: string;
            end_time?: string;
        }): ValidatePathRequest {
            const message = new ValidatePathRequest({});
            if (data.path != null) {
                message.path = dependency_2.hoppipolla.path.Path.fromObject(data.path);
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: ReturnType<typeof dependency_2.hoppipolla.path.Path.prototype.toObject>;
                start_time?: string;
                end_time?: string;
            } = {};
            if (this.path != null) {
                data.path = this.path.toObject();
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_path)
                writer.writeMessage(1, this.path, () => this.path.serialize(writer));
            if (this.start_time.length)
                writer.writeString(2, this.start_time);
            if (this.end_time.length)
                writer.writeString(3, this.end_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatePathRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatePathRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.path, () => message.path = dependency_2.hoppipolla.path.Path.deserialize(reader));
                        break;
                    case 2:
                        message.start_time = reader.readString();
                        break;
                    case 3:
                        message.end_time = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatePathRequest {
            return ValidatePathRequest.deserialize(bytes);
        }
    }
    export class ValidatePathResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fingerprint?: string;
            valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fingerprint" in data && data.fingerprint != undefined) {
                    this.fingerprint = data.fingerprint;
                }
                if ("valid" in data && data.valid != undefined) {
                    this.valid = data.valid;
                }
            }
        }
        get fingerprint() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set fingerprint(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get valid() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set valid(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            fingerprint?: string;
            valid?: boolean;
        }): ValidatePathResponse {
            const message = new ValidatePathResponse({});
            if (data.fingerprint != null) {
                message.fingerprint = data.fingerprint;
            }
            if (data.valid != null) {
                message.valid = data.valid;
            }
            return message;
        }
        toObject() {
            const data: {
                fingerprint?: string;
                valid?: boolean;
            } = {};
            if (this.fingerprint != null) {
                data.fingerprint = this.fingerprint;
            }
            if (this.valid != null) {
                data.valid = this.valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fingerprint.length)
                writer.writeString(1, this.fingerprint);
            if (this.valid != false)
                writer.writeBool(2, this.valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatePathResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatePathResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fingerprint = reader.readString();
                        break;
                    case 2:
                        message.valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatePathResponse {
            return ValidatePathResponse.deserialize(bytes);
        }
    }
    export class GetLatestPolicyTimestampResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            timestamp?: string;
        }): GetLatestPolicyTimestampResponse {
            const message = new GetLatestPolicyTimestampResponse({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: string;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp.length)
                writer.writeString(1, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestPolicyTimestampResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestPolicyTimestampResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestPolicyTimestampResponse {
            return GetLatestPolicyTimestampResponse.deserialize(bytes);
        }
    }
    export class GetDefaultIssuerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            id?: string;
            name?: string;
        } & (({
            description?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                3: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
        }): GetDefaultIssuerResponse {
            const message = new GetDefaultIssuerResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_description)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDefaultIssuerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDefaultIssuerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDefaultIssuerResponse {
            return GetDefaultIssuerResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPolicyManagerService {
        static definition = {
            CreatePolicy: {
                path: "/hoppipolla.policy.PolicyManager/CreatePolicy",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreatePolicyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreatePolicyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreatePolicyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreatePolicyResponse.deserialize(new Uint8Array(bytes))
            },
            DeletePolicy: {
                path: "/hoppipolla.policy.PolicyManager/DeletePolicy",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeletePolicyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeletePolicyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            CreateIssuer: {
                path: "/hoppipolla.policy.PolicyManager/CreateIssuer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateIssuerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateIssuerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateIssuerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateIssuerResponse.deserialize(new Uint8Array(bytes))
            },
            ListPolicies: {
                path: "/hoppipolla.policy.PolicyManager/ListPolicies",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListPoliciesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListPoliciesResponse.deserialize(new Uint8Array(bytes))
            },
            ValidatePath: {
                path: "/hoppipolla.policy.PolicyManager/ValidatePath",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ValidatePathRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ValidatePathRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ValidatePathResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ValidatePathResponse.deserialize(new Uint8Array(bytes))
            },
            GetLatestPolicyTimestamp: {
                path: "/hoppipolla.policy.PolicyManager/GetLatestPolicyTimestamp",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetLatestPolicyTimestampResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetLatestPolicyTimestampResponse.deserialize(new Uint8Array(bytes))
            },
            GetDefaultIssuer: {
                path: "/hoppipolla.policy.PolicyManager/GetDefaultIssuer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetDefaultIssuerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetDefaultIssuerResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreatePolicy(call: grpc_1.ServerUnaryCall<CreatePolicyRequest, CreatePolicyResponse>, callback: grpc_1.sendUnaryData<CreatePolicyResponse>): void;
        abstract DeletePolicy(call: grpc_1.ServerUnaryCall<DeletePolicyRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract CreateIssuer(call: grpc_1.ServerUnaryCall<CreateIssuerRequest, CreateIssuerResponse>, callback: grpc_1.sendUnaryData<CreateIssuerResponse>): void;
        abstract ListPolicies(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, ListPoliciesResponse>, callback: grpc_1.sendUnaryData<ListPoliciesResponse>): void;
        abstract ValidatePath(call: grpc_1.ServerUnaryCall<ValidatePathRequest, ValidatePathResponse>, callback: grpc_1.sendUnaryData<ValidatePathResponse>): void;
        abstract GetLatestPolicyTimestamp(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetLatestPolicyTimestampResponse>, callback: grpc_1.sendUnaryData<GetLatestPolicyTimestampResponse>): void;
        abstract GetDefaultIssuer(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetDefaultIssuerResponse>, callback: grpc_1.sendUnaryData<GetDefaultIssuerResponse>): void;
    }
    export class PolicyManagerClient extends grpc_1.makeGenericClientConstructor(UnimplementedPolicyManagerService.definition, "PolicyManager", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreatePolicy: GrpcUnaryServiceInterface<CreatePolicyRequest, CreatePolicyResponse> = (message: CreatePolicyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreatePolicyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreatePolicyResponse>, callback?: grpc_1.requestCallback<CreatePolicyResponse>): grpc_1.ClientUnaryCall => {
            return super.CreatePolicy(message, metadata, options, callback);
        };
        DeletePolicy: GrpcUnaryServiceInterface<DeletePolicyRequest, dependency_1.google.protobuf.Empty> = (message: DeletePolicyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeletePolicy(message, metadata, options, callback);
        };
        CreateIssuer: GrpcUnaryServiceInterface<CreateIssuerRequest, CreateIssuerResponse> = (message: CreateIssuerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateIssuerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateIssuerResponse>, callback?: grpc_1.requestCallback<CreateIssuerResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateIssuer(message, metadata, options, callback);
        };
        ListPolicies: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, ListPoliciesResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListPoliciesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListPoliciesResponse>, callback?: grpc_1.requestCallback<ListPoliciesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListPolicies(message, metadata, options, callback);
        };
        ValidatePath: GrpcUnaryServiceInterface<ValidatePathRequest, ValidatePathResponse> = (message: ValidatePathRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ValidatePathResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ValidatePathResponse>, callback?: grpc_1.requestCallback<ValidatePathResponse>): grpc_1.ClientUnaryCall => {
            return super.ValidatePath(message, metadata, options, callback);
        };
        GetLatestPolicyTimestamp: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetLatestPolicyTimestampResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetLatestPolicyTimestampResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetLatestPolicyTimestampResponse>, callback?: grpc_1.requestCallback<GetLatestPolicyTimestampResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLatestPolicyTimestamp(message, metadata, options, callback);
        };
        GetDefaultIssuer: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetDefaultIssuerResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDefaultIssuerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDefaultIssuerResponse>, callback?: grpc_1.requestCallback<GetDefaultIssuerResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDefaultIssuer(message, metadata, options, callback);
        };
    }
}
