syntax = "proto3";

import "google/protobuf/empty.proto";
import "path.proto";

package hoppipolla.policy;

// Body responsible for issuing a policy.
//
// It can be a governmental entity, an association, an organization,
// or even an individual.
message Issuer {
  string id = 1;
  string created_at = 2;
  string updated_at = 3;
  string name = 4;
  bool default = 5;
  optional string description = 6;
}

// Policy validating a path based on hops and relative NIP data using 
// Hoppipolla ASP conventions.
message Policy {
  string id = 1;
  string created_at = 2;
  string updated_at = 3;
  Issuer issuer = 4;
  bool active = 5;
  string statements = 6;
  string title = 7;
  optional string description = 8;
}

service PolicyManager {
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse) {}
  rpc UpdatePolicy(UpdatePolicyRequest) returns (UpdatePolicyResponse) {}
  rpc DeletePolicy(DeletePolicyRequest) returns (google.protobuf.Empty) {}
  rpc CreateIssuer(CreateIssuerRequest) returns (CreateIssuerResponse) {}
  rpc ListPolicies(google.protobuf.Empty) returns (ListPoliciesResponse) {}
  rpc ValidatePath(ValidatePathRequest) returns (ValidatePathResponse) {}
  rpc GetLatestPolicyTimestamp(google.protobuf.Empty)
    returns (GetLatestPolicyTimestampResponse) {}
  rpc GetDefaultIssuer(google.protobuf.Empty) 
    returns (GetDefaultIssuerResponse) {}
  rpc GetPolicy(GetPolicyRequest) 
    returns (GetPolicyResponse) {}
}

message CreatePolicyRequest { 
  string issuer_id = 1;
  string statements = 2;
  optional string title = 3;
  optional string description = 4; 
}
message CreatePolicyResponse { 
  Policy policy = 1; 
}

message UpdatePolicyRequest { 
  string id = 1;
  optional string statements = 2;
  optional string title = 3;
  optional string description = 4; 
}
message UpdatePolicyResponse { 
  Policy policy = 1; 
}

message DeletePolicyRequest { 
  string id = 1; 
}

message CreateIssuerRequest { 
  string name = 1;
}
message CreateIssuerResponse { 
  Issuer issuer = 1; 
}

message GetPolicyRequest { 
  string id = 1;
}
message GetPolicyResponse { 
  optional Policy policy = 1; 
}

message ListPoliciesResponse {
  repeated Policy policies = 1;
}

message ValidatePathRequest { 
  hoppipolla.path.Path path = 1; 
  string start_time = 2; // ISO formatted datetime
  string end_time = 3;  // ISO formatted datetime
}
message ValidatePathResponse {
  string fingerprint = 1;
  bool valid = 2;
}

message GetLatestPolicyTimestampResponse { 
  string timestamp = 1; // ISO formatted datetime 
}

message GetDefaultIssuerResponse {
  Issuer issuer = 1;
}