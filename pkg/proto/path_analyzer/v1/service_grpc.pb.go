// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: path_analyzer/v1/service.proto

package path_analyzer

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PathAnalyzer_GetPaths_FullMethodName = "/proto.hoppipolla.path_analyzer.v1.PathAnalyzer/GetPaths"
	PathAnalyzer_Refresh_FullMethodName  = "/proto.hoppipolla.path_analyzer.v1.PathAnalyzer/Refresh"
)

// PathAnalyzerClient is the client API for PathAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service represents the main UI to the framework.
// A client requests a `Path` for a certain destination address (ISD-AS) via this
// service and receives either an optional valid path (if available).
type PathAnalyzerClient interface {
	// Request a valid path given remote address
	GetPaths(ctx context.Context, in *GetPathsRequest, opts ...grpc.CallOption) (*GetPathsResponse, error)
	// Signal to the service that policies have been updated, used internally by
	// the Policy Manager service
	Refresh(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type pathAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewPathAnalyzerClient(cc grpc.ClientConnInterface) PathAnalyzerClient {
	return &pathAnalyzerClient{cc}
}

func (c *pathAnalyzerClient) GetPaths(ctx context.Context, in *GetPathsRequest, opts ...grpc.CallOption) (*GetPathsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPathsResponse)
	err := c.cc.Invoke(ctx, PathAnalyzer_GetPaths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathAnalyzerClient) Refresh(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PathAnalyzer_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathAnalyzerServer is the server API for PathAnalyzer service.
// All implementations must embed UnimplementedPathAnalyzerServer
// for forward compatibility.
//
// The service represents the main UI to the framework.
// A client requests a `Path` for a certain destination address (ISD-AS) via this
// service and receives either an optional valid path (if available).
type PathAnalyzerServer interface {
	// Request a valid path given remote address
	GetPaths(context.Context, *GetPathsRequest) (*GetPathsResponse, error)
	// Signal to the service that policies have been updated, used internally by
	// the Policy Manager service
	Refresh(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedPathAnalyzerServer()
}

// UnimplementedPathAnalyzerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPathAnalyzerServer struct{}

func (UnimplementedPathAnalyzerServer) GetPaths(context.Context, *GetPathsRequest) (*GetPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaths not implemented")
}
func (UnimplementedPathAnalyzerServer) Refresh(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedPathAnalyzerServer) mustEmbedUnimplementedPathAnalyzerServer() {}
func (UnimplementedPathAnalyzerServer) testEmbeddedByValue()                      {}

// UnsafePathAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PathAnalyzerServer will
// result in compilation errors.
type UnsafePathAnalyzerServer interface {
	mustEmbedUnimplementedPathAnalyzerServer()
}

func RegisterPathAnalyzerServer(s grpc.ServiceRegistrar, srv PathAnalyzerServer) {
	// If the following call pancis, it indicates UnimplementedPathAnalyzerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PathAnalyzer_ServiceDesc, srv)
}

func _PathAnalyzer_GetPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathAnalyzerServer).GetPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PathAnalyzer_GetPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathAnalyzerServer).GetPaths(ctx, req.(*GetPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PathAnalyzer_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathAnalyzerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PathAnalyzer_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathAnalyzerServer).Refresh(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PathAnalyzer_ServiceDesc is the grpc.ServiceDesc for PathAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PathAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.hoppipolla.path_analyzer.v1.PathAnalyzer",
	HandlerType: (*PathAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaths",
			Handler:    _PathAnalyzer_GetPaths_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _PathAnalyzer_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "path_analyzer/v1/service.proto",
}
