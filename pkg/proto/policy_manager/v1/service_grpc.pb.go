// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: policy_manager/v1/service.proto

package policy_manager

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PolicyManager_CreatePolicy_FullMethodName          = "/proto.hoppipolla.policy_manager.v1.PolicyManager/CreatePolicy"
	PolicyManager_ReadPolicy_FullMethodName            = "/proto.hoppipolla.policy_manager.v1.PolicyManager/ReadPolicy"
	PolicyManager_UpdatePolicy_FullMethodName          = "/proto.hoppipolla.policy_manager.v1.PolicyManager/UpdatePolicy"
	PolicyManager_DeletePolicy_FullMethodName          = "/proto.hoppipolla.policy_manager.v1.PolicyManager/DeletePolicy"
	PolicyManager_ListPolicies_FullMethodName          = "/proto.hoppipolla.policy_manager.v1.PolicyManager/ListPolicies"
	PolicyManager_FindPaths_FullMethodName             = "/proto.hoppipolla.policy_manager.v1.PolicyManager/FindPaths"
	PolicyManager_RegisterIssuer_FullMethodName        = "/proto.hoppipolla.policy_manager.v1.PolicyManager/RegisterIssuer"
	PolicyManager_SubscribePathAnalyzer_FullMethodName = "/proto.hoppipolla.policy_manager.v1.PolicyManager/SubscribePathAnalyzer"
)

// PolicyManagerClient is the client API for PolicyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyManagerClient interface {
	// Install a policy in the framework
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	// Download a policy source definition and metadata
	ReadPolicy(ctx context.Context, in *ReadPolicyRequest, opts ...grpc.CallOption) (*ReadPolicyResponse, error)
	// Update policy source definition or metadata
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	// Uninstall and delete a policy
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// List all currently active policies with optional filters
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	// Finds a network path compliant with the active policies
	FindPaths(ctx context.Context, in *FindPathsRequest, opts ...grpc.CallOption) (*FindPathsResponse, error)
	// Register an issuer for external updates
	RegisterIssuer(ctx context.Context, in *RegisterIssuerRequest, opts ...grpc.CallOption) (*RegisterIssuerResponse, error)
	// Subcribe an instance of the path analyzer service,
	// stores the client address for identification
	SubscribePathAnalyzer(ctx context.Context, in *SubscribePathAnalyzerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type policyManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyManagerClient(cc grpc.ClientConnInterface) PolicyManagerClient {
	return &policyManagerClient{cc}
}

func (c *policyManagerClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, PolicyManager_CreatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ReadPolicy(ctx context.Context, in *ReadPolicyRequest, opts ...grpc.CallOption) (*ReadPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadPolicyResponse)
	err := c.cc.Invoke(ctx, PolicyManager_ReadPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, PolicyManager_UpdatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PolicyManager_DeletePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, PolicyManager_ListPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) FindPaths(ctx context.Context, in *FindPathsRequest, opts ...grpc.CallOption) (*FindPathsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPathsResponse)
	err := c.cc.Invoke(ctx, PolicyManager_FindPaths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) RegisterIssuer(ctx context.Context, in *RegisterIssuerRequest, opts ...grpc.CallOption) (*RegisterIssuerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterIssuerResponse)
	err := c.cc.Invoke(ctx, PolicyManager_RegisterIssuer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) SubscribePathAnalyzer(ctx context.Context, in *SubscribePathAnalyzerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PolicyManager_SubscribePathAnalyzer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyManagerServer is the server API for PolicyManager service.
// All implementations must embed UnimplementedPolicyManagerServer
// for forward compatibility.
type PolicyManagerServer interface {
	// Install a policy in the framework
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	// Download a policy source definition and metadata
	ReadPolicy(context.Context, *ReadPolicyRequest) (*ReadPolicyResponse, error)
	// Update policy source definition or metadata
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	// Uninstall and delete a policy
	DeletePolicy(context.Context, *DeletePolicyRequest) (*empty.Empty, error)
	// List all currently active policies with optional filters
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	// Finds a network path compliant with the active policies
	FindPaths(context.Context, *FindPathsRequest) (*FindPathsResponse, error)
	// Register an issuer for external updates
	RegisterIssuer(context.Context, *RegisterIssuerRequest) (*RegisterIssuerResponse, error)
	// Subcribe an instance of the path analyzer service,
	// stores the client address for identification
	SubscribePathAnalyzer(context.Context, *SubscribePathAnalyzerRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPolicyManagerServer()
}

// UnimplementedPolicyManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPolicyManagerServer struct{}

func (UnimplementedPolicyManagerServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedPolicyManagerServer) ReadPolicy(context.Context, *ReadPolicyRequest) (*ReadPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPolicy not implemented")
}
func (UnimplementedPolicyManagerServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedPolicyManagerServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedPolicyManagerServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedPolicyManagerServer) FindPaths(context.Context, *FindPathsRequest) (*FindPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPaths not implemented")
}
func (UnimplementedPolicyManagerServer) RegisterIssuer(context.Context, *RegisterIssuerRequest) (*RegisterIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterIssuer not implemented")
}
func (UnimplementedPolicyManagerServer) SubscribePathAnalyzer(context.Context, *SubscribePathAnalyzerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribePathAnalyzer not implemented")
}
func (UnimplementedPolicyManagerServer) mustEmbedUnimplementedPolicyManagerServer() {}
func (UnimplementedPolicyManagerServer) testEmbeddedByValue()                       {}

// UnsafePolicyManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyManagerServer will
// result in compilation errors.
type UnsafePolicyManagerServer interface {
	mustEmbedUnimplementedPolicyManagerServer()
}

func RegisterPolicyManagerServer(s grpc.ServiceRegistrar, srv PolicyManagerServer) {
	// If the following call pancis, it indicates UnimplementedPolicyManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PolicyManager_ServiceDesc, srv)
}

func _PolicyManager_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyManager_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ReadPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ReadPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyManager_ReadPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ReadPolicy(ctx, req.(*ReadPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyManager_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyManager_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyManager_ListPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_FindPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).FindPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyManager_FindPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).FindPaths(ctx, req.(*FindPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_RegisterIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).RegisterIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyManager_RegisterIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).RegisterIssuer(ctx, req.(*RegisterIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_SubscribePathAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribePathAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).SubscribePathAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyManager_SubscribePathAnalyzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).SubscribePathAnalyzer(ctx, req.(*SubscribePathAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyManager_ServiceDesc is the grpc.ServiceDesc for PolicyManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.hoppipolla.policy_manager.v1.PolicyManager",
	HandlerType: (*PolicyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _PolicyManager_CreatePolicy_Handler,
		},
		{
			MethodName: "ReadPolicy",
			Handler:    _PolicyManager_ReadPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _PolicyManager_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _PolicyManager_DeletePolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _PolicyManager_ListPolicies_Handler,
		},
		{
			MethodName: "FindPaths",
			Handler:    _PolicyManager_FindPaths_Handler,
		},
		{
			MethodName: "RegisterIssuer",
			Handler:    _PolicyManager_RegisterIssuer_Handler,
		},
		{
			MethodName: "SubscribePathAnalyzer",
			Handler:    _PolicyManager_SubscribePathAnalyzer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy_manager/v1/service.proto",
}
